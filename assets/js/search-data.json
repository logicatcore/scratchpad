{
  
    
        "post0": {
            "title": "Machine Learning Optimization Algorithms",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# &quot;Optimization algorithms using pytorch&quot; n”, “&gt; &quot;Optimization algorithms comparision and 3D &amp; 2D visualisation&quot; n”, “ n”, “- toc: false n”, “- branch: master n”, “- badges: true n”, “- comments: true n”, “- categories: [machine learning, jupyter] n”, “- image: images/optimization_algos/Figure_2.png n”, “- search_exclude: false” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Optimization algorithms using pytorch n”, “” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Optimization algorithms play a central role in the learning process of most of the machine learning and deep learning algorithms. Here are some of the well known algorithms- n”, “ 1. Vanilla Gradient descent n”, “ 2. Gradient descent with Momentum n”, “ 3. RMSprop n”, “ 4. Adam n”, “ n”, “While all the 4 above listed algorithms differ in their own way and have certain advantages and disadvantages. They share certain similarities with the simple graddient descent algorithm. In this blog post we will go through these 4 algorithms and see how they function on minimizing the loss or finding the minima of a random error function with multiple minimas and maximas implemented using *pytorch. n”, “ n”, “## Error function with multiple minimas and maximas n”, “ n”, “Error Function* $= f(x,y) = 3 times e^{(-(y + 1)^2 - x^2)} times (x - 1)^2 - frac{e^{(-(x + 1)^2 - y^2)}}{3} + e^{(-x^2 - y^2)} times (10x^3 - 2x + 10y^5)$ n”, “ n”, “” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Note: In this blog post, I will not be going into the theory of all the algorithms used rather just concentrate on the implementation and the results n”, “ n”, “For theoretical reference please refer to d2lai chapter on optimization algorithms” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Import all the necessary python modules” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [], “source”: [ “%matplotlib widget n”, “ n”, “import torch n”, “import IPython n”, “import numpy as np n”, “ n”, “from IPython import display n”, “from IPython.display import HTML n”, “ n”, “import matplotlib as mpl n”, “import matplotlib.pyplot as plt n”, “from matplotlib import animation n”, “from mpl_toolkits.mplot3d import Axes3D n”, “from mpl_toolkits.mplot3d import proj3d n”, “from matplotlib.patches import FancyArrowPatch n”, “ n”, “# mpl.rcParams[‘savefig.dpi’] = 300 n”, “plt.style.use(‘seaborn’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### To draw arrows to monitor the progress of optimization” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [], “source”: [ “# To draw 3d arrows in matplotlib n”, “class Arrow3D(FancyArrowPatch): n”, “ def init(self, xs, ys, zs, args, kwargs): n”, “ FancyArrowPatch.__init__(self, (0, 0), (0, 0), *args, **kwargs) n”, “ self._verts3d = xs, ys, zs n”, “ n”, “ def draw(self, renderer): n”, “ xs3d, ys3d, zs3d = self._verts3d n”, “ xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M) n”, “ self.set_positions((xs[0], ys[0]), (xs[1], ys[1])) n”, “ FancyArrowPatch.draw(self, renderer)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Error or loss calculation based on 2 independent parameters” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [], “source”: [ “def calc_z(xx, yy)-&gt; torch.tensor: n”, “ &quot;&quot;&quot; n”, “ Returns the loss at a certain point n”, “ &quot;&quot;&quot; n”, “ return 3 * torch.exp(-(yy + 1) ** 2 - xx ** 2) * (xx - 1) ** 2 - torch.exp(-(xx + 1) ** 2 - yy ** 2) / 3 + torch.exp( n”, “ -xx ** 2 - yy ** 2) * (10 * xx ** 3 - 2 * xx + 10 * yy ** 5)” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [], “source”: [ “fps = 10 # frames per second - to save the progress in optimization as a video n”, “Writer = animation.writers[‘ffmpeg’] n”, “writer = Writer(fps=fps, metadata=dict(artist=’Me’), bitrate=1800)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Initialise the plot with the error function terrain” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “data”: { “application/vnd.jupyter.widget-view+json”: { “model_id”: “ab87915ed00e4ead88d74bb25c131471”, “version_major”: 2, “version_minor”: 0 }, “text/plain”: [ “Canvas(toolbar=Toolbar(toolitems=[(‘Home’, ‘Reset original view’, ‘home’, ‘home’), (‘Back’, ‘Back to previous …” ] }, “metadata”: {}, “output_type”: “display_data” }, { “data”: { “text/plain”: [ “&lt;matplotlib.colorbar.Colorbar at 0x7f7dccd822b0&gt;” ] }, “execution_count”: 5, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “x = torch.linspace(-3, 3, 600) n”, “y = torch.linspace(-3, 3, 600) n”, “xgrid, ygrid = torch.meshgrid(x, y) n”, “zgrid = calc_z(xgrid, ygrid) n”, “ n”, “fig = plt.figure(figsize=(14,6)) n”, “ax0 = fig.add_subplot(121, projection=’3d’) n”, “ax0.set_xlabel(‘$x$’) n”, “ax0.set_ylabel(‘$y$’) n”, “ax0.set_zlabel(‘Random Loss function: ‘ + ‘$f(x, y)$’) n”, “ax0.axis(‘auto’) n”, “cs = ax0.plot_surface(xgrid.numpy(), ygrid.numpy(), zgrid.numpy(), cmap=’viridis’, alpha=0.6) n”, “fig.colorbar(cs) n”, “ n”, “ax1 = fig.add_subplot(122) n”, “qcs = ax1.contour(xgrid.numpy(), ygrid.numpy(), zgrid.numpy(), 20, cmap=’viridis’) n”, “fig.colorbar(qcs)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Vanilla Gradient Descent n”, “ n”, “Gradient descent algorithm which is an iterative optimization algorithm can be described as loop which is executed repeatedly until certain convergence criteria has been met. Gradient descent can be explained using the following equation. n”, “ n”, “### Gradient calculation n”, “ n”, “$ frac{ partial (Error)}{ partial (w_{x,y}^l)} = n”, “ begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix}$ n”, “ n”, “### Update equation n”, “ n”, “$w_{x,y}^l = w_{x,y}^l - lr times frac{ partial (Error)}{ partial (w_{x,y}^l)}$” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [], “source”: [ “epochs = 20 n”, “lr = 0.01 # learning rate n”, “ n”, “xys = torch.tensor([-0.5, -0.7], requires_grad=True) # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ n”, “new_z = 0 n”, “dy_dx_current = 0” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “def step_gd(i): n”, “ global dy_dx_current, xys, lr, new_z, ax0, ax1 n”, “ if i == 0: n”, “ # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ xys = torch.tensor([-0.5, -0.7], requires_grad=True) n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ n”, “ dy_dx_current = xys.grad n”, “ n”, “ cache_pt = [xys[0].detach().numpy(), xys[1].detach().numpy(), new_z.detach().numpy()] n”, “ n”, “ xys = (xys - lr * dy_dx_current).clone().detach().requires_grad_(True) n”, “ n”, “ # vanilla gradient descent n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ # store the new gradient with respect to x and y i.e., (d(error))/ (dx), (d(error))/ (dy) n”, “ dy_dx_current = xys.grad n”, “ n”, “ xys_plot = xys.detach().numpy() n”, “ ax0.scatter(xys_plot[0], xys_plot[1], new_z.detach().numpy(), marker=’s’, c=’r’, s=20, zorder=3) n”, “ a = Arrow3D([cache_pt[0], xys_plot[0]], [cache_pt[1], xys_plot[1]], n”, “ [cache_pt[2], new_z.detach().numpy()], mutation_scale=5, n”, “ lw=2, arrowstyle=&quot;-|&gt;&quot;, color=&quot;k&quot;) n”, “ ax0.add_artist(a) n”, “ n”, “ ax1.scatter(xys_plot[0], xys_plot[1], marker=’’, c=’r’)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “anim_gd = animation.FuncAnimation(fig, step_gd, frames=epochs, interval=(1/fps)1000, repeat=False)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “# HTML(anim_gd.to_html5video()) n”, “anim_gd.save(‘gd.mp4’, writer=writer)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;video controls src=&quot;../images/optimization_algos/gd.mp4&quot; /&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Gradient descent with momentum n”, “ n”, “### Gradient calculation n”, “ n”, “$ frac{ partial (Error)}{ partial (w{x,y}^l)} = n”, “ begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} = beta * begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} + (1 - beta) * begin{vmatrix} n”, “ frac{ partial (Error_{new})}{ partial x} n”, “ frac{ partial (Error_{new})}{ partial y} n”, “ end{vmatrix}$ n”, “ n”, “### Update equation n”, “$w_{x,y}^l = w_{x,y}^l - lr times frac{ partial (Error)}{ partial (w_{x,y}^l)}$” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “epochs = 60 n”, “lr = 0.01 # learning rate n”, “ n”, “xys = torch.tensor([-0.5, -0.7], requires_grad=True) # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ n”, “new_z = 0 n”, “dy_dx_current_gdm = 0 n”, “ n”, “dy_dx_new_gdm = torch.tensor([0.0, 0.0])” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “def step_gdm(i): n”, “ global dy_dx_new_gdm, dy_dx_current_gdm, xys, lr, new_z, ax0, ax1 n”, “ if i == 0: n”, “ # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ xys = torch.tensor([-0.5, -0.7], requires_grad=True) n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ n”, “ dy_dx_current_gdm = xys.grad n”, “ n”, “ cache_pt = [xys[0].detach().numpy(), xys[1].detach().numpy(), new_z.detach().numpy()] n”, “ n”, “ dy_dx_new_gdm = 0.9dy_dx_new_gdm + (1 - 0.9)dy_dx_current_gdm n”, “ xys = (xys - lr * dy_dx_new_gdm).clone().detach().requires_grad_(True) n”, “ n”, “ # gradient descent with momentum n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ # store the new gradient with respect to x and y i.e., (d(error))/ (dx), (d(error))/ (dy) n”, “ dy_dx_current_gdm = xys.grad n”, “ n”, “ xys_plot = xys.detach().numpy() n”, “ ax0.scatter(xys_plot[0], xys_plot[1], new_z.detach().numpy(), marker=’s’, c=’g’, s=20, zorder=3) n”, “ a = Arrow3D([cache_pt[0], xys_plot[0]], [cache_pt[1], xys_plot[1]], n”, “ [cache_pt[2], new_z.detach().numpy()], mutation_scale=5, n”, “ lw=2, arrowstyle=&quot;-|&gt;&quot;, color=&quot;k&quot;) n”, “ ax0.add_artist(a) n”, “ n”, “ ax1.scatter(xys_plot[0], xys_plot[1], marker=’’, c=’g’)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “anim_gdm = animation.FuncAnimation(fig, step_gdm, frames=epochs, interval=(1/fps)1000, repeat=False)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “# HTML(anim_gdm.to_html5video()) n”, “anim_gdm.save(‘momentum.mp4’, writer=writer)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;video controls src=&quot;../images/optimization_algos/momentum.mp4&quot; /&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## RMSprop n”, “* n”, “### Gradient calculation n”, “* n”, “$ frac{ partial (Error)}{ partial (w{x,y}^l)} = n”, “ begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} = beta * begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} + (1 - beta) * begin{vmatrix} n”, “ frac{ partial (Error_{new})}{ partial x} n”, “ frac{ partial (Error_{new})}{ partial y} n”, “ end{vmatrix}^2$ n”, “ n”, “### Update equation n”, “ n”, “$w_{x,y}^l = w_{x,y}^l - lr times frac{ frac{ partial (Error_{new})}{ partial (w_{x,y}^l)}}{ sqrt{ frac{ partial (Error)}{ partial (w_{x,y}^l)} + epsilon}}$” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “epochs = 150 n”, “rmsprop_lr = 0.01 # learning rate n”, “ n”, “xys = torch.tensor([-0.5, -0.7], requires_grad=True) # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ n”, “epsilon = 1e-7 # small constant to avoid division by zero n”, “new_z = 0 n”, “dy_dx_current_rmsprop = 0 n”, “ n”, “dy_dx_new_rmsprop = torch.tensor([0.0, 0.0])” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “def step_rmsprop(i): n”, “ global dy_dx_new_rmsprop, dy_dx_current_rmsprop, xys, rmsprop_lr, new_z, ax0, ax1 n”, “ if i == 0: n”, “ # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ xys = torch.tensor([-0.5, -0.7], requires_grad=True) n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ n”, “ dy_dx_current_rmsprop = xys.grad n”, “ n”, “ cache_pt = [xys[0].detach().numpy(), xys[1].detach().numpy(), new_z.detach().numpy()] n”, “ dy_dx_new_rmsprop = 0.9dy_dx_new_rmsprop + (1 - 0.9)torch.pow(dy_dx_current_rmsprop,2) n”, “ xys = (xys - rmsprop_lr * (dy_dx_current_rmsprop/(torch.sqrt(dy_dx_new_rmsprop) + epsilon))).clone().detach().requires_grad_(True) n”, “ n”, “ # gradient descent with momentum n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ # store the new gradient with respect to x and y i.e., (d(error))/ (dx), (d(error))/ (dy) n”, “ dy_dx_current_rmsprop = xys.grad n”, “ n”, “ xys_plot = xys.detach().numpy() n”, “ ax0.scatter(xys_plot[0], xys_plot[1], new_z.detach().numpy(), marker=’s’, c=’b’, s=20, zorder=3) n”, “ a = Arrow3D([cache_pt[0], xys_plot[0]], [cache_pt[1], xys_plot[1]], n”, “ [cache_pt[2], new_z.detach().numpy()], mutation_scale=5, n”, “ lw=2, arrowstyle=&quot;-|&gt;&quot;, color=&quot;k&quot;) n”, “ ax0.add_artist(a) n”, “ n”, “ ax1.scatter(xys_plot[0], xys_plot[1], marker=’’, c=’b’)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “anim_rmsprop = animation.FuncAnimation(fig, step_rmsprop, frames=epochs, interval=(1/fps)1000, repeat=False)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “# HTML(anim_rmsprop.to_html5_video()) n”, “anim_rmsprop.save(‘rmsprop.mp4’, writer=writer)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;video controls src=&quot;../images/optimization_algos/rmsprop.mp4&quot; /&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Adam n”, “ n”, “### Gradient calculation n”, “ n”, “${ partial (Error)}_{momentum} = n”, “ frac{ partial (Error)}{ partial (w_{x,y}^l)} = n”, “ begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} = beta_1 * begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} + (1 - beta_1) * begin{vmatrix} n”, “ frac{ partial (Error_{new})}{ partial x} n”, “ frac{ partial (Error_{new})}{ partial y} n”, “ end{vmatrix}$ n”, “ n”, “${ partial (Error)}_{rmsprop} = n”, “ frac{ partial (Error)}{ partial (w_{x,y}^l)} = n”, “ begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} = beta_2 * begin{vmatrix} n”, “ frac{ partial (Error)}{ partial x} n”, “ frac{ partial (Error)}{ partial y} n”, “ end{vmatrix} + (1 - beta_2) * begin{vmatrix} n”, “ frac{ partial (Error_{new})}{ partial x} n”, “ frac{ partial (Error_{new})}{ partial y} n”, “ end{vmatrix}^2$ n”, “ n”, “### Update equation n”, “ n”, “$w_{x,y}^l = w_{x,y}^l - lr times frac{ partial (Error){momentum}}{ sqrt{ partial (Error){rmsprop}} + epsilon}$” ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: {}, “outputs”: [], “source”: [ “epochs = 240 n”, “adam_lr = 0.01 # learning rate n”, “ n”, “xys = torch.tensor([-0.5, -0.7], requires_grad=True) # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ n”, “epsilon = 1e-7 # small constant to avoid division by zero n”, “new_z = 0 n”, “dy_dx_current_mom = 0 n”, “dy_dx_current_rmsprop = 0 n”, “ n”, “dy_dx_new = torch.tensor([0.0, 0.0])” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “def step_adam(i): n”, “ global dy_dx_current_mom, dy_dx_current_rmsprop, dy_dx_new, xys, adam_lr, new_z, ax0, ax1 n”, “ if i == 0: n”, “ # initialise starting point of search for minima, another possible starting position np.array([0.1, 1.4]) n”, “ xys = torch.tensor([-0.5, -0.7], requires_grad=True) n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ n”, “ dy_dx_new = xys.grad n”, “ n”, “ cache_pt = [xys[0].detach().numpy(), xys[1].detach().numpy(), new_z.detach().numpy()] n”, “ n”, “ dy_dx_current_mom = 0.9dy_dx_current_mom + (1 - 0.9)dy_dx_new n”, “ dy_dx_current_rmsprop = 0.9dy_dx_current_rmsprop + (1 - 0.9)torch.pow(dy_dx_new,2) n”, “ xys = (xys - adam_lr * (dy_dx_current_mom/(torch.sqrt(dy_dx_current_rmsprop) + epsilon))).clone().detach().requires_grad_(True) n”, “ n”, “ # gradient descent with momentum n”, “ new_z = calc_z(xys[0], xys[1]) n”, “ new_z.backward() n”, “ # store the new gradient with respect to x and y i.e., (d(error))/ (dx), (d(error))/ (dy) n”, “ dy_dx_new = xys.grad n”, “ n”, “ xys_plot = xys.detach().numpy() n”, “ ax0.scatter(xys_plot[0], xys_plot[1], new_z.detach().numpy(), marker=’s’, c=’c’, s=20, zorder=3) n”, “ a = Arrow3D([cache_pt[0], xys_plot[0]], [cache_pt[1], xys_plot[1]], n”, “ [cache_pt[2], new_z.detach().numpy()], mutation_scale=5, n”, “ lw=2, arrowstyle=&quot;-|&gt;&quot;, color=&quot;k&quot;) n”, “ ax0.add_artist(a) n”, “ n”, “ ax1.scatter(xys_plot[0], xys_plot[1], marker=’’, c=’c’)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “anim_adam = animation.FuncAnimation(fig, step_adam, frames=epochs, interval=(1/fps)1000, repeat=False)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “# HTML(anim_adam.to_html5_video()) n”, “anim_adam.save(‘adam.mp4’, writer=writer)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;video controls src=&quot;../images/optimization_algos/adam.mp4&quot; /&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Results n”, “ n”, “We see that all the algorithms find the minimas but take significatnly different paths. While Vanilla gradient descent and gradient descent with momentum find the minima faster compared to RMSprop and Adam here for the same learning rate, studies have proven Adam to be more stable and this ability allows to use higher learning rates as compared to the same learning rates used here.” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.3” } }, “nbformat”: 4, “nbformat_minor”: 4 } .",
            "url": "https://logicatcore.github.io/scratchpad/2020/10/28/Machine-Learning-Optimization-Algorithms.ipynb",
            "relUrl": "/2020/10/28/Machine-Learning-Optimization-Algorithms.ipynb",
            "date": " • Oct 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Google kickstart Mural coding question(2018 RoundH)",
            "content": "Importance of reusing the results (Dynamic programming) . Problem statement: Summary . . There are N sections on a wall and you can paint only one of the sections in a day, the next day you are allowed to paint the section which is adjacent to a painted one only. Also, everyday one section gets destroyed and the section which gets destroyed are always at the ends (adjacent to unpainted ones) . In the above figure you will see one of the many possibilities. . P# -&gt; Painted section on day # | D# -&gt; Destroyed section on day # | . Problem description . Thanh wants to paint a wonderful mural on a wall that is N sections long. Each section of the wall has a beauty score, which indicates how beautiful it will look if it is painted. Unfortunately, the wall is starting to crumble due to a recent flood, so he will need to work fast! At the beginning of each day, Thanh will paint one of the sections of the wall. On the first day, he is free to paint any section he likes. On each subsequent day, he must paint a new section that is next to a section he has already painted, since he does not want to split up the mural. At the end of each day, one section of the wall will be destroyed. It is always a section of wall that is adjacent to only one other section and is unpainted (Thanh is using a waterproof paint, so painted sections can’t be destroyed). The total beauty of Thanh’s mural will be equal to the sum of the beauty scores of the sections he has painted. Thanh would like to guarantee that, no matter how the wall is destroyed, he can still achieve a total beauty of at least B. What’s the maximum value of B for which he can make this guarantee? . Input . The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with a line containing an integer N. Then, another line follows containing a string of N digits from 0 to 9. The i-th digit represents the beauty score of the i-th section of the wall. . Output . For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the maximum beauty score that Thanh can guarantee that he can achieve, as described above. . Limits . 1 ≤ T ≤ 100. Time limit: 20 seconds per test set. Memory limit: 1 GB. . Small dataset (Test set 1 - Visible) . 2 ≤ N ≤ 100. . Large dataset (Test set 2 - Hidden) . For exactly 1 case, N = 5 × 106; for the other T - 1 cases, 2 ≤ N ≤ 100. Sample . Meaning Input Output . Cases | 4 | Case #1: 6 | . #Sections | 4 | Case #2: 14 | . Beauty scores | 1332 | Case #3: 7 | . #Sections | 4 | Case #4: 31 | . Beauty scores | 9583 |   | . #Sections | 3 |   | . Beauty scores | 616 |   | . #Sections | 10 |   | . Beauty scores | 1029384756 |   | . In the first sample case, Thanh can get a total beauty of 6, no matter how the wall is destroyed. On the first day, he can paint either section of wall with beauty score 3. At the end of the day, either the 1st section or the 4th section will be destroyed, but it does not matter which one. On the second day, he can paint the other section with beauty score 3. . | In the second sample case, Thanh can get a total beauty of 14, by painting the leftmost section of wall (with beauty score 9). The only section of wall that can be destroyed is the rightmost one, since the leftmost one is painted. On the second day, he can paint the second leftmost section with beauty score 5. Then the last unpainted section of wall on the right is destroyed. Note that on the second day, Thanh cannot choose to paint the third section of wall (with beauty score 8), since it is not adjacent to any other painted sections. . | In the third sample case, Thanh can get a total beauty of 7. He begins by painting the section in the middle (with beauty score 1). Whichever section is destroyed at the end of the day, he can paint the remaining wall at the start of the second day. . | . Solution . . Looking at the problem and the sample solutions, it is clear that the painted sections are always contiguous(next to each other as chain link) and the length of the painted sections is ceil(N/2). . The solution to the problem is quite simple in it’s own worth but the challenge is to come up with a efficient solution to solve for large number of sections!! The solution to the problem is max of the rolling sum of roll length ceil(N/2) . If you are familiar with pandas library, the solution is a one line of code if we have all the beauty scores of the wall sections in a pandas Series- . import pandas as pd beauty_scores = pd.read_csv(&#39;input/path/to/file&#39;, delimiter=&#39; &#39;) result = pd.beauty_scores.rolling(math.ceil(N/2)).sum().max() . Read the data . . wall_sections = [] beauty_scores = [] with open(&#39;../inputs/mural_2018_H.txt&#39;) as file: cases = int(file.readline().rstrip()) for case in range(cases): wall_sections.append(int(file.readline().rstrip())) beauty_scores.append(list(map(int, list(file.readline().rstrip())))) . Solve the test case one by one . . We first calculate the roll length and then calculate the roll sums of the beauty scores . def solve_a(sections, bs): if sections % 2 == 0: roll = sections // 2 roll_sums = [sum(bs[i:i+roll]) for i in range(sections - roll + 1)] else: roll = sections // 2 + 1 roll_sums = [sum(bs[i:i+roll+1]) for i in range(sections - roll)] return max(roll_sums) for case in range(cases): result = solve(wall_sections[case], beauty_scores[case]) print(&quot;Case #{}: {}&quot;.format(case + 1, result)) . Let us have a look at the number of operations involved- . roll_windows = N - roll_length | summations = (roll_windows) * roll_length | comparisons = roll_windows | . i.e., O(roll_windows + summations + comparisons) Note: The scales are in log . Improved solution, making use of previous results . Based on the operations breakdown we have seen just now, I see that a substantial number of summations can be avoided by utilizing the concept that every successive roll window overlaps the previous roll window except one element/beauty score To save on computations, we just have to add the beauty score of the new section and subtract which we do not want anymore. . Let us have a look at the number of operations involved- . roll_windows = N - roll_length | summations = (roll_windows) * 2 | comparisons = roll_windows | . i.e., O(roll_windows + summations + comparisons) . Based on the graphs it is clear that we see an improvement from O(10^(2log(N))) to O(10^log(N)) . def solve_b(sections, bs): if sections % 2 == 0: roll = sections // 2 tmp = sum(bs[:roll]) max_value = tmp for i in range(1, sections - roll + 1): tmp = tmp + bs[i+roll-1] - bs[i-1] if max_value &lt; tmp: max_value = tmp return max_value else: roll = sections // 2 + 1 tmp = sum(bs[:roll]) max_value = tmp for i in range(1, sections - roll + 1): tmp = tmp + bs[i + roll - 1] - bs[i - 1] if max_value &lt; tmp: max_value = tmp return max_value . Time comparisons . . . Slow(time in seconds) Fast(time in seconds) Improvement factor (times x) Wall sections . 7.91e-05 | 6.48e-05 | 1.22x | 4 | . 4.24e-05 | 3.95e-05 | 1.07x | 4 | . 4.36e-05 | 4.31e-05 | 1.01x | 3 | . 4.38e-05 | 9.08e-05 | 0.48x | 10 | . 0.00121 | 0.00146 | 0.83x | 500 | . 0.0784 | 0.0158 | 4.94x | 5000 | . 6.80 | 0.15 | 44.55x | 50000 | . 712.75 | 1.49 | 478.12x | 500000 | . Try it out . . If you feel like working out or if you have a much simpler and faster approach to solving this problem, I would like to see and learn!! . Here is the link to Test input and the test results if you want to cross check . Case #1: 6 Case #2: 14 Case #3: 7 Case #4: 31 Case #5: 1012 Case #6: 10129 Case #7: 100501 Case #8: 1001276 .",
            "url": "https://logicatcore.github.io/scratchpad/2020/09/10/Google-kickstart-Mural-coding-question-2018-round-H.html",
            "relUrl": "/2020/09/10/Google-kickstart-Mural-coding-question-2018-round-H.html",
            "date": " • Sep 10, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Topology constrained search",
            "content": "Objective . . . To find the 2000th such number in the spiral arrangement of hexagons as seen above, which can divide the product of 6 neighbouring numbers perfectly i.e, the number in the central hexagon should be a factor of the product of the adjacent 6 numbers. . (20 * 37 * 19 * 2 * 9 * 21) / 8 = 664335 (20 * 37 * 19 * 2 * 9 * 21) % 8 = 0 . Logic behind the solution . . As there seems to be no pattern among the numbers distribution around any given hexagon which can be leveraged to find the neighbouring numbers of every hexagon. We resort to reproduce the hexagonal arrangement of numbers as per the problem statement in order to actually determine the neighbouring 6 numbers of any number we are interested in. . . | The next important step is to identify the 6 neighbouring numbers of all the numbers based on the euclidean distance of nearest 6 numbers . . | Next, we start to check if the center number is a factor of the product of the 6 neighbouring numbers. Trying to actually multiply and then divide will eventually bring us to the point where a double or float64 can preceisely store the value of multiplication and hence we need to solve this problem in a smart way. My approach to solving this was based on Prime factorisation . First, we find the prime factors of the center number and the surronding numbers | If all the prime factors of the center are present in the prime factors of all the 6 neighbouring numbers. Then the center number is a factor of the 6 other numbers | | Finally, stop the program when the 2000th number meeting our criteria is found . . | .",
            "url": "https://logicatcore.github.io/scratchpad/2020/08/31/Akka-Coding-Challenge.html",
            "relUrl": "/2020/08/31/Akka-Coding-Challenge.html",
            "date": " • Aug 31, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Finding the coordinates of non-zero pixels in sparse images/matrices",
            "content": "Sparse images/matrices are those in which the contained useful information is less compared to total space being occupied. . To begin with, we will look at an example image/matrix, the output we need and the main take aways from this post. . . Task: To determine the (row, column) values of all the non zero pixels in a matrix or an image. Typical example would be text in a image. If you are familiar with the well known MNIST Handwritten digits dataset, that could be another good example of a sparse image . . The threshold need not be zero and can be any arbitrary value of interest Example images that we will be working with . . . . . We will be going through two approaches in this short tutorial and also see how the methods compare in execution time . Method 1: The traditional and the first approach that comes to mind through for loops . Method 2: We can leverage the broadcasting properties of numpy and find a work around to reach the same result . Libraries used . . matplotlib | time | numpy | . Pre Prep . . First we need to create a sparse image to work with . import time import numpy as np import matplotlib.pyplot as plt # Image height and width dimensions rows = 100 columns = 100 img = np.random.rand(rows, columns) # Drawing number from uniform distribution [0,1] to avoid negative values img = img * 255 img[img &lt; 220] = 0 # this is optional and can be skipped to handle any threshold other than &#39;non zero value&#39; &amp; &#39;zero&#39; img = img.astype(np.uint8) print(f&quot;sparsity: {len(img[img != 0]) * 100 / np.cumproduct(img.shape)[-1]} %&quot;) . Method 1 . . x_coords = np.array([]) # To store column values y_coords = np.array([]) # To store row values start = time.time() for r in range(rows): for c in range(columns): if img[r][c] != 0: x_coords = np.concatenate((x_coords, np.array([c]))) y_coords = np.concatenate((y_coords, np.array([r]))) x_coords = x_coords.reshape(-1, 1) y_coords = y_coords.reshape(-1, 1) coords = np.hstack((y_coords, x_coords)) print(&quot;Finding non zero pixels coordinates with for loops took: &quot;, time.time() - start, &quot; seconds&quot;) . Method 2 . . First we create a template to go with our image dimension and make a boolean mask which we use to find the non zero pixel coordinates . coordinates_grid = np.ones((2, rows, columns), dtype=np.int16) coordinates_grid[0] = coordinates_grid[0] * np.array([range(rows)]).T coordinates_grid[1] = coordinates_grid[1] * np.array([range(rows)]) start = time.time() mask = img != 0 non_zero_coords = np.hstack((coordinates_grid[0][mask].reshape(-1, 1), coordinates_grid[1][mask].reshape(-1, 1))) print(&quot;Finding non zero pixels coordinates using broadcasting took: &quot;, time.time() - start, &quot; seconds&quot;) # print(&quot;Coordinates of the non zero pixels are: n&quot;, non_zero_coords) plt.imshow(img) plt.show() . Results . . sai@sai:~/****/scripts$ python coordinates.py 10 10 information: 13.0 % Finding non zero pixels coordinates with for loops took: 0.0003330707550048828 seconds Finding non zero pixels coordinates using broadcasting took: 3.4809112548828125e-05 seconds sai@sai:~/****/scripts$ python coordinates.py 100 100 information: 13.43 % Finding non zero pixels coordinates with for loops took: 0.024660587310791016 seconds Finding non zero pixels coordinates using broadcasting took: 0.00010442733764648438 seconds sai@sai:~/****/scripts$ python coordinates.py 1000 1000 information: 13.7047 % Finding non zero pixels coordinates with for loops took: 8.874347448348999 seconds Finding non zero pixels coordinates using broadcasting took: 0.007306575775146484 seconds . Conclusions . . It is clear that the execution times differ significantly and the benefits of vectorization becomes more dominant as the input data grows. .",
            "url": "https://logicatcore.github.io/scratchpad/2020/08/13/sparse-image-coordinates.html",
            "relUrl": "/2020/08/13/sparse-image-coordinates.html",
            "date": " • Aug 13, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://logicatcore.github.io/scratchpad/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://logicatcore.github.io/scratchpad/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About me",
          "content": "Intro . My name is Sai Sharath Kakubal, I am from India and am currently pursuing my Masters course at Technische Hochschule Ingolstadt, Germany in International Automotive Engineering with a specialisation in Vehicle Electronics. . Interests and skills . Having pursued Mechanical Engineering in India and having been part of designing and building a Formula Student Race car during my Bachelor’s in a student team and having gotten opportunites to work as an Intern in a couple of companies has allowed me to hone my skills and build upon them progressively. My interests and skills are spread across a wide spectrum, and I especially like good presentation and like to learn new tools to complete any task in an efficient and an elegant way. . I am also passionate about Machine Learning and A.I fields and keep myself upto date with the latest advancements in these fields. . Programming languages that I have worked with . Python | C++ | Matlab | Java | C | .",
          "url": "https://logicatcore.github.io/scratchpad/_pages/about.html",
          "relUrl": "/_pages/about.html",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://logicatcore.github.io/scratchpad/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}